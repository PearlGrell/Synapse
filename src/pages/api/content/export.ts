import { NextApiRequest, NextApiResponse } from "next";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    return res.status(405).end("Method Not Allowed");
  }

  try {
    const { markdown, fileName = "download" } = req.body;

    if (!markdown) {
      return res.status(400).json({ error: "Markdown is required" });
    }


    const css = `
  @page {
    margin: 0.5in;
    @bottom-center {
      content: "Generated by Synapse";
      font-size: 0.8em;
      font-family: "Segoe UI", "Helvetica Neue", Helvetica, Arial, sans-serif;
      color: #666;
    }
    @bottom-right {
      content: "Page " counter(page) " of " counter(pages);
      font-size: 0.8em;
      font-family: "Segoe UI", "Helvetica Neue", Helvetica, Arial, sans-serif;
      color: #666;
    }
  }

  body {
    font-family: "Segoe UI", "Helvetica Neue", Helvetica, Arial, sans-serif;
    font-size: 14px;
    color: #333;
    line-height: 1.5;
    margin: 0;
    padding: 0;
  }

  h1 {
    font-size: 2em;
    margin-bottom: 0.6em;
    border-bottom: 2px solid #ccc;
  }

  h2 {
    font-size: 1.5em;
    margin-top: 1.5em;
    margin-bottom: 0.5em;
  }

  p {
    margin: 0 0 0.6em 0;
  }

  ul, ol {
    margin: 0.8em 0;
    padding-left: 1.4em;
  }

  li {
    margin-bottom: 0.4em;
  }

  code {
    font-family: Consolas, Monaco, "Courier New", monospace;
    background-color: #f4f4f4;
    padding: 0.2em 0.4em;
    border-radius: 3px;
  }

  pre {
    background-color: #f4f4f4;
    padding: 1em;
    border-radius: 3px;
    overflow-x: auto;
  }

  blockquote {
    border-left: 4px solid #ccc;
    padding-left: 1em;
    color: #666;
    margin: 1em 0;
  }

  img {
    max-width: 100%;
    height: auto;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    margin: 1em 0;
  }

  th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }

  th {
    background-color: #f2f2f2;
  }

  a {
    color: #1a0dab;
    text-decoration: none;
  }

  a:hover {
    text-decoration: underline;
  }

  hr {
    border: 0;
    border-top: 1px solid #ccc;
    margin: 1.5em 0;
  }

  body > *:last-child {
    margin-bottom: 0 !important;
    padding-bottom: 0 !important;
  }
`;


    const response = await fetch("https://md-2-pdf.onrender.com", {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      body: new URLSearchParams({
        markdown,
        css,
        engine: "weasyprint"
      })
    });

    if (!response.ok) {
      console.error("PDF service failed:", await response.text());
      return res.status(500).json({ error: "PDF generation failed" });
    }

    const pdfBuffer = await response.arrayBuffer();

    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", `attachment; filename="${fileName}.pdf"`);
    res.send(Buffer.from(pdfBuffer));
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to generate PDF" });
  }
}
